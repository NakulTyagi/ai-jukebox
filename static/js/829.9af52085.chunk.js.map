{"version":3,"file":"static/js/829.9af52085.chunk.js","mappings":"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","sources":["pages/ImageGeneration.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  TextField,\n  Grid,\n  Card,\n  CardMedia,\n  CardActions,\n  Typography,\n  MenuItem,\n  Select,\n  FormControl,\n  InputLabel,\n  Container,\n  Alert,\n  IconButton,\n  Button,\n  Snackbar,\n} from '@mui/material';\nimport {\n  Download as DownloadIcon,\n  ContentCopy as ContentCopyIcon,\n} from '@mui/icons-material';\n\nconst ImageGeneration = () => {\n  const [prompt, setPrompt] = useState('');\n  const [size, setSize] = useState('512x512');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [images, setImages] = useState([]);\n  const [snackbar, setSnackbar] = useState({ open: false, message: '' });\n\n  const handleGenerate = async () => {\n    if (!prompt) {\n      setError('Please enter a prompt');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n      if (!apiKey) {\n        setError('API key not configured');\n        return;\n      }\n\n      const response = await fetch('https://api.openai.com/v1/images/generations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify({\n          prompt,\n          n: 4,\n          size,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error?.message || 'Failed to generate images');\n      }\n\n      setImages(data.data.map(img => ({\n        url: img.url,\n        timestamp: new Date().toISOString(),\n      })));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDownload = async (imageUrl, index) => {\n    try {\n      setSnackbar({ open: true, message: 'Starting download...' });\n      \n      // Create a temporary link element\n      const link = document.createElement('a');\n      link.href = imageUrl;  // Direct URL to the image\n      link.target = '_blank'; // Open in new tab\n      \n      // Generate a filename\n      const filename = `ai-generated-${Date.now()}-${index + 1}.png`;\n      link.download = filename;\n      \n      // Append to document, click, and cleanup\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      setSnackbar({ open: true, message: 'Download started!' });\n    } catch (error) {\n      console.error('Download error:', error);\n      setSnackbar({ open: true, message: 'Failed to download image. Try right-click and Save Image As...' });\n    }\n  };\n\n  // Alternative download method if the above doesn't work\n  const handleDownloadAlternative = (imageUrl, index) => {\n    // Open image in new tab\n    window.open(imageUrl, '_blank');\n    setSnackbar({ \n      open: true, \n      message: 'Image opened in new tab. Right-click and select \"Save Image As...\" to download.' \n    });\n  };\n\n  const handleCopyPrompt = () => {\n    navigator.clipboard.writeText(prompt);\n  };\n\n  const handleCloseSnackbar = () => {\n    setSnackbar({ open: false, message: '' });\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ py: 4 }}>\n        <Typography\n          variant=\"h3\"\n          component=\"h1\"\n          gutterBottom\n          sx={{ color: 'white', mb: 4 }}\n        >\n          AI Image Generation\n        </Typography>\n\n        <Card sx={{ \n          p: 3, \n          mb: 4, \n          background: 'linear-gradient(145deg, #1a1f2c 0%, #0d1117 100%)',\n          border: '1px solid rgba(255,255,255,0.1)'\n        }}>\n          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n            <TextField\n              fullWidth\n              label=\"Enter your prompt\"\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              sx={{\n                flex: 1,\n                '& .MuiOutlinedInput-root': {\n                  color: 'white',\n                  '& fieldset': {\n                    borderColor: 'rgba(255,255,255,0.23)',\n                  },\n                },\n                '& .MuiInputLabel-root': {\n                  color: 'rgba(255,255,255,0.7)',\n                },\n              }}\n            />\n            \n            <FormControl sx={{ minWidth: 120 }}>\n              <InputLabel sx={{ color: 'rgba(255,255,255,0.7)' }}>Size</InputLabel>\n              <Select\n                value={size}\n                label=\"Size\"\n                onChange={(e) => setSize(e.target.value)}\n                sx={{ color: 'white' }}\n              >\n                <MenuItem value=\"256x256\">256x256</MenuItem>\n                <MenuItem value=\"512x512\">512x512</MenuItem>\n                <MenuItem value=\"1024x1024\">1024x1024</MenuItem>\n              </Select>\n            </FormControl>\n\n            <Button\n              variant=\"contained\"\n              onClick={handleGenerate}\n              disabled={loading}\n              sx={{\n                background: 'linear-gradient(45deg, #4CAF50 30%, #45a049 90%)',\n                '&:hover': {\n                  background: 'linear-gradient(45deg, #45a049 30%, #4CAF50 90%)',\n                }\n              }}\n            >\n              {loading ? 'Generating...' : 'Generate Images'}\n            </Button>\n          </Box>\n\n          {error && (\n            <Alert severity=\"error\" sx={{ mt: 2 }}>\n              {error}\n            </Alert>\n          )}\n        </Card>\n\n        <Grid container spacing={3}>\n          {images.map((image, index) => (\n            <Grid item xs={12} sm={6} md={6} key={index}>\n              <Card sx={{ \n                background: 'linear-gradient(145deg, #1a1f2c 0%, #0d1117 100%)',\n                border: '1px solid rgba(255,255,255,0.1)',\n                position: 'relative',\n              }}>\n                <CardMedia\n                  component=\"img\"\n                  image={image.url}\n                  alt={`Generated image ${index + 1}`}\n                  sx={{ \n                    height: 300, \n                    objectFit: 'contain',\n                    backgroundColor: '#0d1117',\n                    cursor: 'pointer' // Add pointer cursor\n                  }}\n                  onClick={() => handleDownloadAlternative(image.url, index)} // Add click handler\n                />\n                <CardActions sx={{ \n                  justifyContent: 'space-between', \n                  padding: 2,\n                  borderTop: '1px solid rgba(255,255,255,0.1)'\n                }}>\n                  <Typography \n                    variant=\"caption\" \n                    sx={{ color: 'rgba(255,255,255,0.7)' }}\n                  >\n                    Click image to open in new tab\n                  </Typography>\n                  <Box sx={{ display: 'flex', gap: 1 }}>\n                    <IconButton\n                      onClick={() => handleDownload(image.url, index)}\n                      sx={{ \n                        color: 'white',\n                        '&:hover': {\n                          backgroundColor: 'rgba(255,255,255,0.1)'\n                        }\n                      }}\n                      title=\"Download Image\"\n                    >\n                      <DownloadIcon />\n                    </IconButton>\n                    <IconButton\n                      onClick={handleCopyPrompt}\n                      sx={{ \n                        color: 'white',\n                        '&:hover': {\n                          backgroundColor: 'rgba(255,255,255,0.1)'\n                        }\n                      }}\n                      title=\"Copy Prompt\"\n                    >\n                      <ContentCopyIcon />\n                    </IconButton>\n                  </Box>\n                </CardActions>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000} // Increased duration for better readability\n        onClose={handleCloseSnackbar}\n        message={snackbar.message}\n        sx={{\n          '& .MuiSnackbarContent-root': {\n            backgroundColor: '#1a1f2c',\n            border: '1px solid rgba(255,255,255,0.1)',\n          }\n        }}\n      />\n    </Container>\n  );\n};\n\nexport default ImageGeneration; "],"names":["_useState","useState","_useState2","_slicedToArray","prompt","setPrompt","_useState3","_useState4","size","setSize","_useState5","_useState6","loading","setLoading","_useState7","_useState8","error","setError","_useState9","_useState10","images","setImages","_useState11","open","message","_useState12","snackbar","setSnackbar","handleGenerate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","apiKey","response","data","_data$error","wrap","_context","prev","next","abrupt","process","fetch","method","headers","concat","body","JSON","stringify","n","sent","json","ok","Error","map","img","url","timestamp","Date","toISOString","t0","finish","stop","apply","arguments","handleDownload","_ref2","_callee2","imageUrl","index","link","filename","_context2","document","createElement","href","target","now","download","appendChild","click","removeChild","console","_x","_x2","handleCopyPrompt","navigator","clipboard","writeText","_jsxs","Container","maxWidth","children","Box","sx","py","_jsx","Typography","variant","component","gutterBottom","color","mb","Card","p","background","border","display","gap","flexWrap","TextField","fullWidth","label","value","onChange","e","flex","borderColor","FormControl","minWidth","InputLabel","Select","MenuItem","Button","onClick","disabled","Alert","severity","mt","Grid","container","spacing","image","item","xs","sm","md","position","CardMedia","alt","height","objectFit","backgroundColor","cursor","window","CardActions","justifyContent","padding","borderTop","IconButton","title","DownloadIcon","ContentCopyIcon","Snackbar","autoHideDuration","onClose"],"sourceRoot":""}